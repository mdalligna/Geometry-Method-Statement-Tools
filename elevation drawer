import rhinoscriptsyntax as rs
import Rhino as r
import scriptcontext

# get bay curves
# polysrf = rs.GetObjects("pick polysrf", 16)
panels = rs.GetObjects("pick panels", 4)
circles = rs.GetObjects("get circles", rs.filter.curve)

# get grid curves
gridcrvs1a = rs.GetObjects("pick grid curves1a", 4)

rs.EnableRedraw(True)

numBays = 25
halfBays = 13
bayname = []

PolySrf = []
Circles = []

GridCrvs1a = []

RefOrPt = []
RefXPt = []
RefYPt = []

rec = []
Planes = []
Panels = []

TextRidgeCrv = []
TextOGC01 = []
TextOGC02 = []
TextEdgeCrv = []

# creates a layer for every bay
for i in range(numBays):
    bayname.append("bay"+str(i).zfill(2))
    rs.AddLayer(bayname[i])

##########################################################################
# sort curves
##########################################################################

for i, pl in enumerate(panels):
    Panels.append(pl)    
    rs.ObjectColor(pl, (255, 255, 255))
    rs.ObjectLayer(pl, bayname[i])
"""
for i, ps in enumerate(polysrf):
    PolySrf.append(ps)    
    rs.ObjectColor(ps, (255, 255, 255))
    rs.ObjectLayer(ps, bayname[i])
"""
for i, cir in enumerate(circles):
    Circles.append(cir)    
    rs.ObjectColor(cir, (255, 0, 255))
    rs.ObjectLinetype(cir, "Dot")
    rs.ObjectLayer(cir, bayname[i]) 

for i, gr1acrv in enumerate(gridcrvs1a):
    GridCrvs1a.append(gr1acrv)    
    rs.ObjectColor(gr1acrv, (255, 127, 0))
    rs.ObjectPrintWidth(gr1acrv, 0.3)
    rs.ObjectLinetype(gr1acrv, "DashDot")
    rs.ObjectLayer(gr1acrv, bayname[i])

##########################################################################
# intersection
##########################################################################
for i in range(numBays):
    refOrPt = rs.CircleCenterPoint(Circles[i])
    RefOrPt.append(refOrPt)
    
    refXPt = rs.CurveStartPoint(Circles[i])
    yyTemp = rs.AddPoint(refXPt)
    RefXPt.append(refXPt)
    
    yTemp = rs.MoveObject(yyTemp, (0.0,0.0,1.0))
    refYPt = rs.PointCoordinates(yTemp)
    RefYPt.append(refYPt)

"""
for i in range(numBays):
    planes = rs.PlaneFromPoints(RefOrPt[i], RefXPt[i], RefYPt[i])
    Planes.append(planes)

    rect = rs.AddRectangle(Planes[i], 100.0, 100.0)
    sides = rs.ExplodeCurves(rect)
    srf = rs.AddEdgeSrf(sides)
    rec.append(srf)

for i in range(numBays):
    panels = rs.IntersectBreps(PolySrf[i], rec[i])
    for i in panels:
        rh = rs.coercerhinoobject(i)
        v = rh.GetType()
        if v is r.DocObjects.PointObject: continue
        #panels = r.DocObjects.RhinoObject.Id(panels_ )
        #panels = panels_.Id
        #panels = r.DocObjects.RhinoObject.Id(getset)
        Panels.append(i)
        rs.ObjectColor(i, (255, 255, 255))
        rs.ObjectLayer(i, bayname[i])
        break
"""

##########################################################################
# orient geometry
##########################################################################
# target pts to reorient the geom
orPt = rs.AddPoint(0.0, 0.0, 0.0)
xPt = rs.AddPoint(-2.0, 0.0, 0.0)
yPt = rs.AddPoint(0.0, 2.0, 0.0)

for i in range(numBays):
    rs.CurrentLayer("bay"+str(i).zfill(2))# turn on one layer at a time  

# orient geometry - move all  the geometry to the origin WITH CAMERA ROTATION
    rs.OrientObject(Panels[i], (RefOrPt[i], RefXPt[i], RefYPt[i]), (orPt, xPt, yPt))
    rs.OrientObject(Circles[i], (RefOrPt[i], RefXPt[i], RefYPt[i]), (orPt, xPt, yPt))

    rs.OrientObject(GridCrvs1a[i], (RefOrPt[i], RefXPt[i], RefYPt[i]), (orPt, xPt, yPt))

    # leave only last layer on
    rs.CurrentLayer("Baked")    
    rs.LayerVisible(bayname[i-1],False) # turn on one layer at a time


##########################################################################
# orient mullions
##########################################################################
def addMullions():
    centre = rs.CircleCenterPoint(Circles[i])
    if rs.IsCurve(Panels[i]):
        pan = rs.ExplodeCurves(Panels[i])
        for j in range(len(pan)):
            ep = []
            endPts = rs.CurveEndPoint(pan[j])
            ep.append(endPts)
            for k in range(len(ep)):
                lines = rs.AddLine(centre, ep[k],)
                rs.ExtendCurveLength(lines, 0, 1, 5.0)                                                           
                rs.ObjectLayer(lines, bayname[i])
                rs.ObjectLinetype(lines, "Dash")
            
for i in range(len(Panels)):
    addMullions()

"""
##########################################################################
# add tags
##########################################################################
for i in range(numBays):
    textPtRC = rs.CurveMidPoint(FacadeCrvs[i])
    textRC = rs.AddText("Ridge Curve - RC \nRefer to 11, 12, 13", textPtRC, 0.8, 'Arial')
    TextRidgeCrv.append(textRC)
    rs.ObjectColor(textRC, (255, 255, 255))
    rs.ObjectLayer(textRC, "bay"+str(i).zfill(2))

    textPtEC = rs.CurveMidPoint(HorCir[i])
    textEC = rs.AddText("Edge Curve - EC \nRefer to 14", textPtEC, 0.8, 'Arial')
    TextEdgeCrv.append(textEC)
    rs.ObjectColor(textEC, (255, 255, 255))
    rs.ObjectLayer(textEC, "bay"+str(i).zfill(2))

    textPtOGC01 = rs.CurveMidPoint(Columns1[i])
    textOGC01 = rs.AddText("Offset Grid Curve 01 - OGC01 \nRefer to 05, 06, 07", textPtOGC01, 0.8, 'Arial')
    TextOGC01.append(textOGC01)
    rs.ObjectColor(textOGC01, (255, 255, 255))
    rs.ObjectLayer(textOGC01, "bay"+str(i).zfill(2))

    textPtOGC02 = rs.CurveMidPoint(Columns2[i])
    textOGC02 = rs.AddText("Offset Grid Curve 02 - OGC02 \nRefer to 08, 09, 10", textPtOGC02, 0.8, 'Arial')
    TextOGC02.append(textOGC02)
    rs.ObjectColor(textOGC02, (255, 255, 255))
    rs.ObjectLayer(textOGC02, "bay"+str(i).zfill(2))
"""
##########################################################################
# add bubbles
##########################################################################

radius = 1.0
def bubbles(origin, layer, text1):
    bubblePt1 = rs.CurveStartPoint(origin)
    bPt1 = rs.AddPoint(bubblePt1)
    bubbleCentre = rs.MoveObject(bPt1, (0.0, radius, 0.0))
    bubble = rs.AddCircle(bubbleCentre, radius)
    bubbleText = rs.AddText(text1, bubbleCentre, 0.7, 'Arial', 0, 2)
    rs.MoveObject(bubbleText, (0.0, -radius/3, 0.0))
    rs.ObjectColor(bubble, (255, 127, 0))
    rs.ObjectLayer(bubble, layer)
    rs.ObjectColor(bubbleText, (255, 127, 0))
    rs.ObjectLayer(bubbleText, layer)

for i in range(0, halfBays, 1):
    if i < halfBays-1:
        bubbles(GridCrvs1a[i], "bay"+str(i).zfill(2), "E"+str(i+1).zfill(2))
    if i == halfBays-1:
        bubbles(GridCrvs1a[i], "bay"+str(i).zfill(2), "W"+str(i).zfill(2))

for i in range(halfBays, 0, -1):
    if i > 1:
        bubbles(GridCrvs1a[i+(2*(halfBays-i))], "bay"+str(i+(2*(halfBays-i))).zfill(2), "W"+str(i-2).zfill(2) )

print "lol"

rs.EnableRedraw(False)
